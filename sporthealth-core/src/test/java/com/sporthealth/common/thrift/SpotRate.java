/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sporthealth.common.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-07-09")
public class SpotRate implements org.apache.thrift.TBase<SpotRate, SpotRate._Fields>, java.io.Serializable, Cloneable, Comparable<SpotRate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MySpotRate");

  private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BID_FIELD_DESC = new org.apache.thrift.protocol.TField("bid", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField OFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("offer", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField QUOTEUNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("quoteunit", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpotRateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpotRateTupleSchemeFactory();

  public java.lang.String symbol; // required
  public double bid; // required
  public double offer; // required
  public double mid; // required
  public double quoteunit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SYMBOL((short)1, "symbol"),
    BID((short)2, "bid"),
    OFFER((short)3, "offer"),
    MID((short)4, "mid"),
    QUOTEUNIT((short)5, "quoteunit");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SYMBOL
          return SYMBOL;
        case 2: // BID
          return BID;
        case 3: // OFFER
          return OFFER;
        case 4: // MID
          return MID;
        case 5: // QUOTEUNIT
          return QUOTEUNIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BID_ISSET_ID = 0;
  private static final int __OFFER_ISSET_ID = 1;
  private static final int __MID_ISSET_ID = 2;
  private static final int __QUOTEUNIT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BID, new org.apache.thrift.meta_data.FieldMetaData("bid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OFFER, new org.apache.thrift.meta_data.FieldMetaData("offer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUOTEUNIT, new org.apache.thrift.meta_data.FieldMetaData("quoteunit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpotRate.class, metaDataMap);
  }

  public SpotRate() {
  }

  public SpotRate(
    java.lang.String symbol,
    double bid,
    double offer,
    double mid,
    double quoteunit)
  {
    this();
    this.symbol = symbol;
    this.bid = bid;
    setBidIsSet(true);
    this.offer = offer;
    setOfferIsSet(true);
    this.mid = mid;
    setMidIsSet(true);
    this.quoteunit = quoteunit;
    setQuoteunitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpotRate(SpotRate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSymbol()) {
      this.symbol = other.symbol;
    }
    this.bid = other.bid;
    this.offer = other.offer;
    this.mid = other.mid;
    this.quoteunit = other.quoteunit;
  }

  public SpotRate deepCopy() {
    return new SpotRate(this);
  }

  @Override
  public void clear() {
    this.symbol = null;
    setBidIsSet(false);
    this.bid = 0.0;
    setOfferIsSet(false);
    this.offer = 0.0;
    setMidIsSet(false);
    this.mid = 0.0;
    setQuoteunitIsSet(false);
    this.quoteunit = 0.0;
  }

  public java.lang.String getSymbol() {
    return this.symbol;
  }

  public SpotRate setSymbol(java.lang.String symbol) {
    this.symbol = symbol;
    return this;
  }

  public void unsetSymbol() {
    this.symbol = null;
  }

  /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
  public boolean isSetSymbol() {
    return this.symbol != null;
  }

  public void setSymbolIsSet(boolean value) {
    if (!value) {
      this.symbol = null;
    }
  }

  public double getBid() {
    return this.bid;
  }

  public SpotRate setBid(double bid) {
    this.bid = bid;
    setBidIsSet(true);
    return this;
  }

  public void unsetBid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BID_ISSET_ID);
  }

  /** Returns true if field bid is set (has been assigned a value) and false otherwise */
  public boolean isSetBid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BID_ISSET_ID);
  }

  public void setBidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BID_ISSET_ID, value);
  }

  public double getOffer() {
    return this.offer;
  }

  public SpotRate setOffer(double offer) {
    this.offer = offer;
    setOfferIsSet(true);
    return this;
  }

  public void unsetOffer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFER_ISSET_ID);
  }

  /** Returns true if field offer is set (has been assigned a value) and false otherwise */
  public boolean isSetOffer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFER_ISSET_ID);
  }

  public void setOfferIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFER_ISSET_ID, value);
  }

  public double getMid() {
    return this.mid;
  }

  public SpotRate setMid(double mid) {
    this.mid = mid;
    setMidIsSet(true);
    return this;
  }

  public void unsetMid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MID_ISSET_ID);
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MID_ISSET_ID);
  }

  public void setMidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MID_ISSET_ID, value);
  }

  public double getQuoteunit() {
    return this.quoteunit;
  }

  public SpotRate setQuoteunit(double quoteunit) {
    this.quoteunit = quoteunit;
    setQuoteunitIsSet(true);
    return this;
  }

  public void unsetQuoteunit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __QUOTEUNIT_ISSET_ID);
  }

  /** Returns true if field quoteunit is set (has been assigned a value) and false otherwise */
  public boolean isSetQuoteunit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __QUOTEUNIT_ISSET_ID);
  }

  public void setQuoteunitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __QUOTEUNIT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SYMBOL:
      if (value == null) {
        unsetSymbol();
      } else {
        setSymbol((java.lang.String)value);
      }
      break;

    case BID:
      if (value == null) {
        unsetBid();
      } else {
        setBid((java.lang.Double)value);
      }
      break;

    case OFFER:
      if (value == null) {
        unsetOffer();
      } else {
        setOffer((java.lang.Double)value);
      }
      break;

    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((java.lang.Double)value);
      }
      break;

    case QUOTEUNIT:
      if (value == null) {
        unsetQuoteunit();
      } else {
        setQuoteunit((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SYMBOL:
      return getSymbol();

    case BID:
      return getBid();

    case OFFER:
      return getOffer();

    case MID:
      return getMid();

    case QUOTEUNIT:
      return getQuoteunit();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SYMBOL:
      return isSetSymbol();
    case BID:
      return isSetBid();
    case OFFER:
      return isSetOffer();
    case MID:
      return isSetMid();
    case QUOTEUNIT:
      return isSetQuoteunit();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SpotRate)
      return this.equals((SpotRate)that);
    return false;
  }

  public boolean equals(SpotRate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_symbol = true && this.isSetSymbol();
    boolean that_present_symbol = true && that.isSetSymbol();
    if (this_present_symbol || that_present_symbol) {
      if (!(this_present_symbol && that_present_symbol))
        return false;
      if (!this.symbol.equals(that.symbol))
        return false;
    }

    boolean this_present_bid = true;
    boolean that_present_bid = true;
    if (this_present_bid || that_present_bid) {
      if (!(this_present_bid && that_present_bid))
        return false;
      if (this.bid != that.bid)
        return false;
    }

    boolean this_present_offer = true;
    boolean that_present_offer = true;
    if (this_present_offer || that_present_offer) {
      if (!(this_present_offer && that_present_offer))
        return false;
      if (this.offer != that.offer)
        return false;
    }

    boolean this_present_mid = true;
    boolean that_present_mid = true;
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (this.mid != that.mid)
        return false;
    }

    boolean this_present_quoteunit = true;
    boolean that_present_quoteunit = true;
    if (this_present_quoteunit || that_present_quoteunit) {
      if (!(this_present_quoteunit && that_present_quoteunit))
        return false;
      if (this.quoteunit != that.quoteunit)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSymbol()) ? 131071 : 524287);
    if (isSetSymbol())
      hashCode = hashCode * 8191 + symbol.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bid);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offer);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(mid);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(quoteunit);

    return hashCode;
  }

  @Override
  public int compareTo(SpotRate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBid()).compareTo(other.isSetBid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bid, other.bid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOffer()).compareTo(other.isSetOffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offer, other.offer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQuoteunit()).compareTo(other.isSetQuoteunit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuoteunit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quoteunit, other.quoteunit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MySpotRate(");
    boolean first = true;

    sb.append("symbol:");
    if (this.symbol == null) {
      sb.append("null");
    } else {
      sb.append(this.symbol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bid:");
    sb.append(this.bid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offer:");
    sb.append(this.offer);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mid:");
    sb.append(this.mid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quoteunit:");
    sb.append(this.quoteunit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpotRateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpotRateStandardScheme getScheme() {
      return new SpotRateStandardScheme();
    }
  }

  private static class SpotRateStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpotRate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpotRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.symbol = iprot.readString();
              struct.setSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.bid = iprot.readDouble();
              struct.setBidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.offer = iprot.readDouble();
              struct.setOfferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.mid = iprot.readDouble();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // QUOTEUNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.quoteunit = iprot.readDouble();
              struct.setQuoteunitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpotRate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.symbol != null) {
        oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
        oprot.writeString(struct.symbol);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BID_FIELD_DESC);
      oprot.writeDouble(struct.bid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OFFER_FIELD_DESC);
      oprot.writeDouble(struct.offer);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MID_FIELD_DESC);
      oprot.writeDouble(struct.mid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(QUOTEUNIT_FIELD_DESC);
      oprot.writeDouble(struct.quoteunit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpotRateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpotRateTupleScheme getScheme() {
      return new SpotRateTupleScheme();
    }
  }

  private static class SpotRateTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpotRate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpotRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSymbol()) {
        optionals.set(0);
      }
      if (struct.isSetBid()) {
        optionals.set(1);
      }
      if (struct.isSetOffer()) {
        optionals.set(2);
      }
      if (struct.isSetMid()) {
        optionals.set(3);
      }
      if (struct.isSetQuoteunit()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSymbol()) {
        oprot.writeString(struct.symbol);
      }
      if (struct.isSetBid()) {
        oprot.writeDouble(struct.bid);
      }
      if (struct.isSetOffer()) {
        oprot.writeDouble(struct.offer);
      }
      if (struct.isSetMid()) {
        oprot.writeDouble(struct.mid);
      }
      if (struct.isSetQuoteunit()) {
        oprot.writeDouble(struct.quoteunit);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpotRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.symbol = iprot.readString();
        struct.setSymbolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bid = iprot.readDouble();
        struct.setBidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.offer = iprot.readDouble();
        struct.setOfferIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mid = iprot.readDouble();
        struct.setMidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.quoteunit = iprot.readDouble();
        struct.setQuoteunitIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

